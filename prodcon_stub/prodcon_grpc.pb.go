// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: prodcon.proto

package prodcon

import (
	context "context"
	//grpc "github.com/truls/chained-service-example/grpc_stub"
	//grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
//const _ = grpc.SupportPackageIsVersion7

// ProducerConsumerClient is the client API for ProducerConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProducerConsumerClient interface {
	ConsumeByte(ctx context.Context, in *ConsumeByteRequest, opts ...interface{}) (*ConsumeByteReply, error)
	ConsumeStream(ctx context.Context, opts ...interface{}) (ProducerConsumer_ConsumeStreamClient, error)
}

type producerConsumerClient struct {
	//cc grpc.ClientConnInterface
}

func NewProducerConsumerClient(cc interface{}) ProducerConsumerClient {
	return &producerConsumerClient{}
}

type ConsumeByteRequest struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

type ConsumeByteReply struct {
	Value  bool  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Length int32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (c *producerConsumerClient) ConsumeByte(ctx context.Context, in *ConsumeByteRequest, opts ...interface{}) (*ConsumeByteReply, error) {
	out := new(ConsumeByteReply)
	// err := c.cc.Invoke(ctx, "/prodcon.ProducerConsumer/ConsumeByte", in, out, opts...)
	// if err != nil {
	// 	return nil, err
	// }
	return out, nil
}

func (c *producerConsumerClient) ConsumeStream(ctx context.Context, opts ...interface{}) (ProducerConsumer_ConsumeStreamClient, error) {
	// stream, err := c.cc.NewStream(ctx, &ProducerConsumer_ServiceDesc.Streams[0], "/prodcon.ProducerConsumer/ConsumeStream", opts...)
	// if err != nil {
	// 	return nil, err
	// }
	// x := &producerConsumerConsumeStreamClient{stream}
	return nil, nil
}

type ProducerConsumer_ConsumeStreamClient interface {
	Send(*ConsumeByteRequest) error
	CloseAndRecv() (*ConsumeByteReply, error)
	//grpc.ClientStream
}

type producerConsumerConsumeStreamClient struct {
	//grpc.ClientStream
}

func (x *producerConsumerConsumeStreamClient) Send(m *ConsumeByteRequest) error {
	//return x.ClientStream.SendMsg(m)
	return nil
}

func (x *producerConsumerConsumeStreamClient) CloseAndRecv() (*ConsumeByteReply, error) {
	// if err := x.ClientStream.CloseSend(); err != nil {
	// 	return nil, err
	// }
	// m := new(ConsumeByteReply)
	// if err := x.ClientStream.RecvMsg(m); err != nil {
	// 	return nil, err
	// }
	return nil, nil
}

// ProducerConsumerServer is the server API for ProducerConsumer service.
// All implementations must embed UnimplementedProducerConsumerServer
// for forward compatibility
type ProducerConsumerServer interface {
	ConsumeByte(context.Context, *ConsumeByteRequest) (*ConsumeByteReply, error)
	ConsumeStream(ProducerConsumer_ConsumeStreamServer) error
	mustEmbedUnimplementedProducerConsumerServer()
}

// UnimplementedProducerConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedProducerConsumerServer struct {
}

func (UnimplementedProducerConsumerServer) ConsumeByte(context.Context, *ConsumeByteRequest) (*ConsumeByteReply, error) {
	return nil, nil//status.Errorf(codes.Unimplemented, "method ConsumeByte not implemented")
}
func (UnimplementedProducerConsumerServer) ConsumeStream(ProducerConsumer_ConsumeStreamServer) error {
	return nil//status.Errorf(codes.Unimplemented, "method ConsumeStream not implemented")
}
func (UnimplementedProducerConsumerServer) mustEmbedUnimplementedProducerConsumerServer() {}

// UnsafeProducerConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducerConsumerServer will
// result in compilation errors.
type UnsafeProducerConsumerServer interface {
	mustEmbedUnimplementedProducerConsumerServer()
}

func RegisterProducerConsumerServer(s interface{}, srv ProducerConsumerServer) {
	//s.RegisterService(&ProducerConsumer_ServiceDesc, srv)
}

func _ProducerConsumer_ConsumeByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor interface{}) (interface{}, error) {
	// in := new(ConsumeByteRequest)
	// if err := dec(in); err != nil {
	// 	return nil, err
	// }
	// if interceptor == nil {
	// 	return srv.(ProducerConsumerServer).ConsumeByte(ctx, in)
	// }
	// info := &grpc.UnaryServerInfo{
	// 	Server:     srv,
	// 	FullMethod: "/prodcon.ProducerConsumer/ConsumeByte",
	// }
	// handler := func(ctx context.Context, req interface{}) (interface{}, error) {
	// 	return srv.(ProducerConsumerServer).ConsumeByte(ctx, req.(*ConsumeByteRequest))
	// }
	// return interceptor(ctx, in, info, handler)
	return nil, nil
}

func _ProducerConsumer_ConsumeStream_Handler(srv interface{}, stream interface{}) error {
	// return
	// srv.(ProducerConsumerServer).ConsumeStream(&producerConsumerConsumeStreamServer{stream})
	return nil
}

type ProducerConsumer_ConsumeStreamServer interface {
	SendAndClose(*ConsumeByteReply) error
	Recv() (*ConsumeByteRequest, error)
	//grpc.ServerStream
}

type producerConsumerConsumeStreamServer struct {
	//grpc.ServerStream
}

func (x *producerConsumerConsumeStreamServer) SendAndClose(m *ConsumeByteReply) error {
	//return x.ServerStream.SendMsg(m)
	return nil
}

func (x *producerConsumerConsumeStreamServer) Recv() (*ConsumeByteRequest, error) {
	// m := new(ConsumeByteRequest)
	// if err := x.ServerStream.RecvMsg(m); err != nil {
	// 	return nil, err
	// }
	return nil, nil
}

// ProducerConsumer_ServiceDesc is the grpc.ServiceDesc for ProducerConsumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProducerConsumer_ServiceDesc = 0 // grpc.ServiceDesc{
// 	ServiceName: "prodcon.ProducerConsumer",
// 	HandlerType: (*ProducerConsumerServer)(nil),
// 	Methods: []grpc.MethodDesc{
// 		{
// 			MethodName: "ConsumeByte",
// 			Handler:    _ProducerConsumer_ConsumeByte_Handler,
// 		},
// 	},
// 	Streams: []grpc.StreamDesc{
// 		{
// 			StreamName:    "ConsumeStream",
// 			Handler:       _ProducerConsumer_ConsumeStream_Handler,
// 			ClientStreams: true,
// 		},
// 	},
// 	Metadata: "prodcon.proto",
// }
