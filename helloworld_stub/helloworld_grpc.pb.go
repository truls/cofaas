// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: helloworld.proto

package helloworld

import (
	context "context"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...interface{}) (*HelloReply, error)
	SayHelloStreamReply(ctx context.Context, in *HelloRequest, opts ...interface{}) (Greeter_SayHelloStreamReplyClient, error)
}

type greeterClient struct {
}

func NewGreeterClient(cc interface{}) GreeterClient {
	return &greeterClient{}
}

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...interface{}) (*HelloReply, error) {
	out := new(HelloReply)
	// Do RPC method call here
	//err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	// if err != nil {
	// 	return nil, err
	// }
	return out, nil
}

func (c *greeterClient) SayHelloStreamReply(ctx context.Context, in *HelloRequest, opts ...interface{}) (Greeter_SayHelloStreamReplyClient, error) {
	// stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/helloworld.Greeter/SayHelloStreamReply", opts...)
	// if err != nil {
	// 	return nil, err
	// }
	// x := &greeterSayHelloStreamReplyClient{stream}
	// if err := x.ClientStream.SendMsg(in); err != nil {
	// 	return nil, err
	// }
	// if err := x.ClientStream.CloseSend(); err != nil {
	// 	return nil, err
	// }
	return nil, nil
	//return x, nil
}

type Greeter_SayHelloStreamReplyClient interface {
	// Recv() (*HelloReply, error)
	// grpc.ClientStream
}

type greeterSayHelloStreamReplyClient struct {
	//grpc.ClientStream
}

func (x *greeterSayHelloStreamReplyClient) Recv() (*HelloReply, error) {
	// m := new(HelloReply)
	// if err := x.ClientStream.RecvMsg(m); err != nil {
	// 	return nil, err
	// }
	// return m, nil
	return nil, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHelloStreamReply(*HelloRequest, Greeter_SayHelloStreamReplyServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) SayHelloStreamReply(*HelloRequest, Greeter_SayHelloStreamReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStreamReply not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s interface{}, srv GreeterServer) {
	//s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor interface{}) (interface{}, error) {
	// in := new(HelloRequest)
	// if err := dec(in); err != nil {
	// 	return nil, err
	// }
	// if interceptor == nil {
	// 	return srv.(GreeterServer).SayHello(ctx, in)
	// }
	// info := &grpc.UnaryServerInfo{
	// 	Server:     srv,
	// 	FullMethod: "/helloworld.Greeter/SayHello",
	// }
	// handler := func(ctx context.Context, req interface{}) (interface{}, error) {
	// 	return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	// }
	// return interceptor(ctx, in, info, handler)
	return nil, nil
}

func _Greeter_SayHelloStreamReply_Handler(srv interface{}, stream interface{}) error {
	// m := new(HelloRequest)
	// if err := stream.RecvMsg(m); err != nil {
	// 	return err
	// }
	// return srv.(GreeterServer).SayHelloStreamReply(m,
	// &greeterSayHelloStreamReplyServer{stream})
	return nil
}

type Greeter_SayHelloStreamReplyServer interface {
	Send(*HelloReply) error
	//grpc.ServerStream
}

type greeterSayHelloStreamReplyServer struct {
	//grpc.ServerStream
}

func (x *greeterSayHelloStreamReplyServer) Send(m *HelloReply) error {
	// return x.ServerStream.SendMsg(m)
	return nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = 0
// = grpc.ServiceDesc{
// 	ServiceName: "helloworld.Greeter",
// 	HandlerType: (*GreeterServer)(nil),
// 	Methods: []grpc.MethodDesc{
// 		{
// 			MethodName: "SayHello",
// 			Handler:    _Greeter_SayHello_Handler,
// 		},
// 	},
// 	Streams: []grpc.StreamDesc{
// 		{
// 			StreamName:    "SayHelloStreamReply",
// 			Handler:       _Greeter_SayHelloStreamReply_Handler,
// 			ServerStreams: true,
// 		},
// 	},
// 	Metadata: "helloworld.proto",
// }
